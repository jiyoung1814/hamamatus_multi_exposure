lamda = list(range(380,781))
hamamatus_wavelength = [307.2880978,310.2276249,313.1597466,316.0844732,319.0018148,321.9117817,324.8143841,327.7096323,330.5975365,333.4781069,336.3513537,339.2172873,342.0759177,344.9272552,347.7713101,350.6080927,353.437613,356.2598814,359.074908,361.8827032,364.6832771,367.47664,370.2628021,373.0417736,375.8135647,378.5781858,381.3356469,384.0859584,386.8291305,389.5651734,392.2940973,395.0159125,397.7306292,400.4382576,403.1388079,405.8322905,408.5187154,411.198093,413.8704334,416.535747,419.1940438,421.8453343,424.4896285,427.1269367,429.7572692,432.3806361,434.9970478,437.6065144,440.2090461,442.8046533,445.393346,447.9751346,450.5500293,453.1180403,455.6791779,458.2334522,460.7808735,463.321452,465.855198,468.3821217,470.9022333,473.415543,475.9220612,478.4217979,480.9147634,483.4009681,485.880422,488.3531354,490.8191186,493.2783817,495.7309351,498.1767889,500.6159534,503.0484388,505.4742553,507.8934131,510.3059226,512.7117939,515.1110372,517.5036628,519.8896808,522.2691017,524.6419354,527.0081924,529.3678828,531.7210169,534.0676048,536.4076568,538.7411832,541.0681942,543.3886999,545.7027107,548.0102367,550.3112882,552.6058755,554.8940086,557.175698,559.4509537,561.7197861,563.9822054,566.2382217,568.4878454,570.7310866,572.9679556,575.1984626,577.4226179,579.6404316,581.851914,584.0570753,586.2559258,588.4484757,590.6347352,592.8147145,594.988424,597.1558737,599.3170739,601.472035,603.620767,605.7632802,607.8995849,610.0296913,612.1536095,614.2713499,616.3829227,618.4883381,620.5876063,622.6807376,624.7677421,626.8486302,628.923412,630.9920978,633.0546978,635.1112222,637.1616813,639.2060853,641.2444444,643.2767688,645.3030689,647.3233547,649.3376366,651.3459247,653.3482294,655.3445608,657.3349291,659.3193446,661.2978175,663.2703581,665.2369766,667.1976831,669.152488,671.1014015,673.0444337,674.981595,676.9128955,678.8383455,680.7579552,682.6717349,684.5796947,686.4818449,688.3781957,690.2687574,692.1535402,694.0325543,695.90581,697.7733174,699.6350868,701.4911285,703.3414526,705.1860694,707.0249891,708.858222,710.6857783,712.5076682,714.3239019,716.1344897,717.9394418,719.7387684,721.5324797,723.3205861,725.1030977,726.8800247,728.6513774,730.417166,732.1774007,733.9320918,735.6812495,737.424884,739.1630055,740.8956244,742.6227507,744.3443948,746.0605668,747.7712771,749.4765358,751.1763531,752.8707393,754.5597047,756.2432593,757.9214136,759.5941777,761.2615618,762.9235761,764.580231,766.2315365,767.8775031,769.5181408,771.1534599,772.7834706,774.4081832,776.027608,777.641755,779.2506346,780.854257,782.4526324,784.0457711,785.6336832,787.216379,788.7938688,790.3661627,791.933271,793.4952039,795.0519717,796.6035846,798.1500528,799.6913865,801.227596,802.7586915,804.2846832,805.8055814,807.3213962,808.832138,810.3378169,811.8384432,813.3340271,814.8245788,816.3101086,817.7906267,819.2661433,820.7366687,822.202213,823.6627866,825.1183996,826.5690622,828.0147848,829.4555774,830.8914505,832.3224141,833.7484786,835.169654,836.5859508,837.9973791,839.4039491,840.805671,842.2025552,843.5946117,844.981851,846.3642831,847.7419183,849.1147669,850.482839,851.8461449,853.2046949,854.5584991,855.9075678,857.2519112,858.5915395,859.926463,861.256692,862.5822365,863.903107,865.2193135,866.5308663,867.8377757,869.1400519,870.4377051,871.7307455,873.0191834,874.303029,875.5822925,876.8569842,878.1271142,879.3926929,880.6537304,881.910237,883.1622229,884.4096984,885.6526736,886.8911588]
condition = [-1,0,1,2] #람다 구할 때 더하고 빼는 값들

class Lagrange_interpolation:

    def __init__(self,leveling_data, cas_data):
        hamamtus_data = getData(leveling_data)


        cas_lamda, hamamtus_lamda = getLamda(cas_data, hamamtus_data)

        cas_lagrange = lagrange_interpolation(cas_lamda)
        hamamtus_lagrange = lagrange_interpolation(hamamtus_lamda)

        self.lagrange_data ={
            'cas': cas_lagrange,
            'hamamtus': hamamtus_lagrange
        }





def getData(leveling_data):
    hamamtus_data = {}

    pixel = list(leveling_data.keys())
    for i in pixel:
        hamamtus_data[hamamatus_wavelength[i]] = leveling_data[i][0]

    return hamamtus_data

def getLamda(cas_data, hamamtus_data):
    cas_wavelength = list(map(float, cas_data.keys()))
    cas_spd = list(map(float, cas_data.values()))

    cas_lamda = {}
    hamamtus_lamda = {}

    for i in condition:
        cas = {}
        hamamtus = {}

        for l in lamda:
            c = findNearNum(cas_wavelength, l)+i #index
            cas[l] = [cas_wavelength[c], cas_spd[c]]  #ex) {380: [379.9876, 6.5658], ...780: [,]}

            h = hamamatus_wavelength[findNearNum(hamamatus_wavelength, l) + i]
            hamamtus[l] = [h,hamamtus_data[h]]
            # hamamtus.append(hamamatus_wavelength[findNearNum(hamamatus_wavelength, l) + i])

        cas_lamda[i] = cas
        hamamtus_lamda[i] = hamamtus

    return cas_lamda, hamamtus_lamda



def findNearNum(list, value):
    nearest = min(list, key=lambda x: abs(x - value))
    nearest_index = list.index(nearest)
    return nearest_index


def lagrange_interpolation(ld):
    total_s = {}

    for l in range(0,(780-380+1)):

        s_lamda = 0
        for i in range(4):
            numerator = 1
            denominator = 1
            s = ld[condition[i]][lamda[l]][1]
            for j in range(4):
                if i != j:
                    numerator *= (lamda[l] - ld[condition[j]][lamda[l]][0])
                    denominator *= (ld[condition[i]][lamda[l]][0] - ld[condition[j]][lamda[l]][0])
            s_lamda += ((numerator / denominator) * s)

        total_s[lamda[l]] = s_lamda

    return total_s